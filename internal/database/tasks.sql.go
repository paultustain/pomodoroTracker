// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const completeTask = `-- name: CompleteTask :one
UPDATE tasks
SET updated_at = NOW(),
completed = NOT completed 
WHERE id = $1
RETURNING id, created_at, updated_at, task, completed, project_id, description, time_limit_type, time_limit
`

func (q *Queries) CompleteTask(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, completeTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Task,
		&i.Completed,
		&i.ProjectID,
		&i.Description,
		&i.TimeLimitType,
		&i.TimeLimit,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks(id, created_at, updated_at, task, completed, project_id)
VALUES (
	gen_random_uuid(),
	NOW(), 
	NOW(), 
	$1,
	false, 
	$2
)
RETURNING id, created_at, updated_at, task, completed, project_id, description, time_limit_type, time_limit
`

type CreateTaskParams struct {
	Task      string
	ProjectID uuid.NullUUID
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Task, arg.ProjectID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Task,
		&i.Completed,
		&i.ProjectID,
		&i.Description,
		&i.TimeLimitType,
		&i.TimeLimit,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id=$1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getAllOpen = `-- name: GetAllOpen :many
SELECT id, created_at, updated_at, task, completed, project_id, description, time_limit_type, time_limit FROM tasks WHERE completed IS false
`

func (q *Queries) GetAllOpen(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllOpen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Task,
			&i.Completed,
			&i.ProjectID,
			&i.Description,
			&i.TimeLimitType,
			&i.TimeLimit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, created_at, updated_at, task, completed, project_id, description, time_limit_type, time_limit FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Task,
			&i.Completed,
			&i.ProjectID,
			&i.Description,
			&i.TimeLimitType,
			&i.TimeLimit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectTasks = `-- name: GetProjectTasks :many
SELECT id, created_at, updated_at, task, completed, project_id, description, time_limit_type, time_limit FROM tasks WHERE project_id = $1 ORDER BY created_at, (completed is true) ASC
`

func (q *Queries) GetProjectTasks(ctx context.Context, projectID uuid.NullUUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getProjectTasks, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Task,
			&i.Completed,
			&i.ProjectID,
			&i.Description,
			&i.TimeLimitType,
			&i.TimeLimit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
